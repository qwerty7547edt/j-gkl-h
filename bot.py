# -*- coding: utf8 -*-
import random
from datetime import time
from random import randint
import string
import telebot
import time
from telebot import types
from telebot.types import InputMediaPhoto
import requests
import sqlite3
import json
import os
from PIL import Image
from config import token, admin, vxodadmin, vxodworker, maxpromo, minimalka, maximalka, zalety, bot_username, nicknameqiwi
from buttons import b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b16, b17, b18, b19, b20, b22, \
	otzivi, b112
from buttons import userpanel, menu, empty, cancel, bal
from answers import a0, a1, a11, a19, skolkochasov, a112

bot = telebot.TeleBot(token)

con = sqlite3.connect("data.db")
cur = con.cursor()
cur.execute('''CREATE TABLE if not exists sposobaoplaty(number int)''')
con.commit()

con = sqlite3.connect("data.db")
cur = con.cursor()
cur.execute('''CREATE TABLE if not exists card(num int)''')
con.commit()

con = sqlite3.connect("data.db")
cur = con.cursor()
cur.execute('''CREATE TABLE if not exists oplatac(n int,id int,summ int)''')
con.commit()

con = sqlite3.connect("data.db")
cur = con.cursor()
cur.execute('''CREATE TABLE if not exists qiwi(num int,token text)''')
con.commit()

con = sqlite3.connect("data.db")
cur = con.cursor()
cur.execute(f"select count(*) from card")
if cur.fetchone()[0] == 0:
	con.commit()
	con = sqlite3.connect("data.db")
	cur = con.cursor()
	cur.execute(f"INSERT INTO card (num) "
				f"VALUES ({7777777777})")
	con.commit()

con = sqlite3.connect("data.db")
cur = con.cursor()
cur.execute(f"select count(*) from qiwi")
if cur.fetchone()[0] == 0:
	con.commit()
	con = sqlite3.connect("data.db")
	cur = con.cursor()
	cur.execute(f"INSERT INTO qiwi (num,token) "
				f"VALUES ({7777777777},\'{'default'}\')")
	con.commit()

con = sqlite3.connect("data.db")
cur = con.cursor()
cur.execute(f"select count(*) from sposobaoplaty")
if cur.fetchone()[0] == 0:
	con.commit()
	con = sqlite3.connect("data.db")
	cur = con.cursor()
	cur.execute(f"INSERT INTO sposobaoplaty (number) "
				f"VALUES ({1})")
	con.commit()


@bot.message_handler(commands=['start'])
def send_welcome(message):
	con = sqlite3.connect("data.db")
	cur = con.cursor()
	cur.execute(f"select count(*) from users where id = {message.chat.id}")
	if cur.fetchone()[0] == 0:
		con.commit()
		ref = message.text
		if len(ref) != 6:
			try:
				ref = int(ref[7:])
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select count(*) from users where id = {ref}")
				if cur.fetchone()[0] != 0:
					con.commit()
					boss = ref
				else:
					con.commit()
					boss = admin

			except:
				boss = admin
		else:
			boss = admin
		id = message.chat.id
		name = (f"{message.chat.first_name} {'|'} {message.chat.last_name}")
		referals = 0
		user_name = message.chat.username
		con = sqlite3.connect("data.db")
		cur = con.cursor()
		cur.execute(f"INSERT INTO users (id,name,referals,boss, username,photoid,balance) "
					f"VALUES ({id},\"{name}\",{referals},{boss}, \"{user_name}\",{1},{0})")
		con.commit()

		con = sqlite3.connect("data.db")
		cur = con.cursor()
		cur.execute(f"SELECT referals FROM users WHERE id = {boss}")
		referal = cur.fetchone()[0]
		referals = referal + 1
		con.commit()
		con = sqlite3.connect("data.db")
		cur = con.cursor()
		cur.execute(f"UPDATE users SET referals = {referals} WHERE id = {boss}")
		con.commit()

		goroda = types.ReplyKeyboardMarkup(resize_keyboard=True)
		button_location = types.KeyboardButton("–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥üìç", request_location=True)
		button_manual = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é‚úçüèª")
		goroda.add(button_location, button_manual)

		bot.send_message(message.chat.id, f"ü§ó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.chat.first_name}\n–ù–∞–∂–º–∏—Ç–µ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥üìç –∏–ª–∏ –í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é‚úçüèª",
                     reply_markup=goroda)
		
		bot.send_message(boss, f"–£ –≤–∞—Å –Ω–æ–≤—ã–π üêò–ú–∞–º–æ–Ω—Ç [{message.chat.first_name}](tg://user?id={message.chat.id})",
						 parse_mode='Markdown')
		
	else:
			con.commit()
			stickers = ['CAACAgIAAxkBAAEBM-BggrHread3F142tJYnOpKTKVc3tQACDQEAAladvQpG_UMdBUTXlx8E',
					'CAACAgIAAxkBAAEBM91ggrHl8_4xhl-e-jlNJZ-Rtn0SOAACBAEAAladvQreBNF6Zmb3bB8E',
					'CAACAgEAAxkBAAEBM9pggrHeNPDgVQ6SCQU50Ov3aVqOcgACxAUAAr-MkAR0SG3e07gfIx8E',
					'CAACAgIAAxkBAAEBM9dggrHTRqI0l7kR8OVad9dQr-EZwwACSwMAArVx2gZu3ktViH-zcB8E',
					'CAACAgIAAxkBAAEBM9RggrHHuUf7jO5Yotr1SBuyPrJamAACBAEAAladvQreBNF6Zmb3bB8E',
					'CAACAgIAAxkBAAEBM9FggrG-pw9xOsrsTbAHLn-58dQ3swACbwADWbv8JTcoYHK3J9txHwQ',
					'CAACAgIAAxkBAAEBM85ggrG3lrLUSUCl1FD1XRyB9laN4QACWgUAAj-VzAobFrmFvSDDnR8E',
					'CAACAgIAAxkBAAEBM-NggrNIEd1KFDyEqvHr0ZYeV5txAAPPAAP3AsgPufg4-6cYrv0fBA']

			bot.send_sticker(message.chat.id, random.choice(stickers), reply_markup=userpanel())
	
@bot.message_handler(content_types=['location'])
def handle_location(message):
    bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é –∞–Ω–∫–µ—Ç—ã...")
    simulate_loading(message)
    bot.send_message(message.chat.id, "‚úÖ–ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\nüìã–°–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω\nü¶ã–ü—Ä–∏—Ç—è–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞ —Å Escort", reply_markup=userpanel())

@bot.message_handler(func=lambda message: message.text == "–í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é‚úçüèª")
def handle_manual_city(message):
    bot.send_message(message.chat.id, "üèô –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    bot.register_next_step_handler(message, process_manual_city)

def process_manual_city(message):
    city = message.text

    # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
    with open("allowed_cities.txt", "r", encoding="utf-8") as file:
        allowed_cities = [line.strip() for line in file]

    if city in allowed_cities:
        bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é –∞–Ω–∫–µ—Ç—ã...")
        simulate_loading(message)  # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        bot.send_message(message.chat.id, "‚úÖ–ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\nüìã–°–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω\nü¶ã–ü—Ä–∏—Ç—è–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞ —Å Escort", reply_markup=userpanel())
    else:
        bot.send_message(message.chat.id, "‚ùå–ì–æ—Ä–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –µ—â–µ —Ä–∞–∑!")
        bot.register_next_step_handler(message, process_manual_city)
def simulate_loading(message):
    total_requests = 2  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ 2
    duration = 3  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∂–µ–ª–∞–µ–º—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –≤ 5 —Å–µ–∫—É–Ω–¥

    delay = duration / total_requests  # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

    for i in range(1, total_requests + 1):
        bot.send_chat_action(message.chat.id, "typing")
        progress = i / total_requests * 100
        time.sleep(delay)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É

@bot.message_handler(content_types=['text'])
def main_message(message):
	if message.text == b0:
		markup = types.InlineKeyboardMarkup()
		button1 = types.InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url='–õ–∏–Ω–∫ –Ω–∞ —Ç–µ—Ö –ø–æ–æ–¥–µ—Ä–∂–∫—É')
		markup.add(button1)
		bot.send_message(message.chat.id, a0, reply_markup=markup)
	elif message.text == b1:
		try:

			keyboard = types.InlineKeyboardMarkup()
			q1 = types.InlineKeyboardButton(text=b14, callback_data="vybor")
			q3 = types.InlineKeyboardButton(text=b16, callback_data="prew")
			q4 = types.InlineKeyboardButton(text=b17, callback_data="next")
			keyboard.add(q1)
			keyboard.add(q3, q4)

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select count(*) from ancety where status = {1}")
			dostup = cur.fetchone()[0]
			con.commit()

			if dostup == 0:
				bot.send_message(message.chat.id, "–ê–Ω–∫–µ—Ç—ã –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")
			else:

				bot.send_message(message.chat.id, a1, reply_markup=menu())
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select photoid from users where id = {message.chat.id}")
				imgid = cur.fetchone()[0]
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select status from ancety where id = {imgid}")
				stat = cur.fetchone()[0]
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select count(*) from ancety")
				counta = cur.fetchone()[0]
				con.commit()

				if imgid > counta:
					imgid = 1

				while stat == 0:
					imgid += 1
					if imgid > counta:
						imgid = 1
					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"select status from ancety where id = {imgid}")
					stat = cur.fetchone()[0]
					con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select mainphoto from ancety where id = {imgid}")
				img = cur.fetchone()[0]
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select name from ancety where id = {imgid}")
				aname = cur.fetchone()[0]
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select cena from ancety where id = {imgid}")
				acena = cur.fetchone()[0]
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select about from ancety where id = {imgid}")
				aabout = cur.fetchone()[0]
				con.commit()

				texttext = f"ü¶ã –ò–º—è: {aname}\n\nüí∞  –¶–µ–Ω–∞ –∑–∞ —á–∞—Å: {acena}\n\n‚ùóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {aabout}"

				imglink = f"images/{img}"
				photo = open(imglink, 'rb')
				bot.send_photo(message.chat.id, photo, caption=texttext, reply_markup=keyboard)
		except Exception as e:
			raise


	elif message.text == b2:
		con = sqlite3.connect("data.db")
		cur = con.cursor()
		cur.execute(f"select balance from users where id = {message.chat.id}")
		bn = cur.fetchone()[0]
		con.commit()
		bot.send_message(message.chat.id, f"üè¶ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫\n\n–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É: {bn}‚ÇΩ", reply_markup=bal())
		bot.register_next_step_handler(message, balik)
	elif message.text == b3:

		bot.send_message(message.chat.id, "‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥", reply_markup=cancel())
		bot.register_next_step_handler(message, promo)
	elif message.text == b4:
		bot.send_message(message.chat.id, b4)
	elif message.text == b11:

		bot.send_message(message.chat.id, a11, reply_markup=userpanel())
	elif message.text == vxodadmin and message.chat.id == admin:
		adm = types.InlineKeyboardMarkup()
		adm1 = types.InlineKeyboardButton(text=b4, callback_data="qiwi")
		adm9 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="cardcard")
		adm10 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∫—É", callback_data="platejka")
		adm2 = types.InlineKeyboardButton(text=b5, callback_data="stat")
		adm3 = types.InlineKeyboardButton(text=b6, callback_data="send")
		adm8 = types.InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç", callback_data="spisoka")
		adm4 = types.InlineKeyboardButton(text=b9, callback_data="addancete")
		adm7 = types.InlineKeyboardButton(text=b22, callback_data="addphoto")
		adm5 = types.InlineKeyboardButton(text=b10, callback_data="deleteancete")
		adm6 = types.InlineKeyboardButton(text=b7, callback_data="esc")
		adm.add(adm1)
		adm.add(adm9)
		adm.add(adm10)
		adm.add(adm2)
		adm.add(adm3)
		adm.add(adm8)
		adm.add(adm4)
		adm.add(adm7)
		adm.add(adm5)
		adm.add(adm6)
		bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å‚öôÔ∏è", reply_markup=adm)
	elif message.text == vxodworker:
		wrk = types.InlineKeyboardMarkup()
		wrk1 = types.InlineKeyboardButton(text=b8, callback_data="ref")
		wrk5 = types.InlineKeyboardButton(text="–°–æ–æ–±—â–µ–Ω–∏–µ –º–∞–º–æ–Ω—Ç—É", callback_data="smsmamont")
		wrk2 = types.InlineKeyboardButton(text=b18, callback_data="prom")
		wrk4 = types.InlineKeyboardButton(text=b5, callback_data="statw")
		wrk3 = types.InlineKeyboardButton(text=b11, callback_data="menu")

		wrk.add(wrk1)
		wrk.add(wrk5)
		wrk.add(wrk2)
		wrk.add(wrk4)
		wrk.add(wrk3)
		bot.send_message(message.chat.id, "–í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å‚öôÔ∏è", reply_markup=wrk)
	elif message.text == b19:
		markup = types.InlineKeyboardMarkup()
		button1 = types.InlineKeyboardButton("–û—Ç–∑—ã–≤—ã üí¨", url='https://example.com')
		button2 = types.InlineKeyboardButton("–ì–∞—Ä–∞–Ω—Ç–∏–∏ üõ°", url='https://example.com')
		markup.add(button1, button2)
		bot.send_message(message.chat.id, a19, reply_markup=markup)
	elif message.text == b112:
		bot.send_message(message.chat.id, a112)
	elif message.text == b20:
		bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=userpanel())


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
	keyboard = types.InlineKeyboardMarkup()
	q1 = types.InlineKeyboardButton(text=b14, callback_data="vybor")
	q3 = types.InlineKeyboardButton(text=b16, callback_data="prew")
	q4 = types.InlineKeyboardButton(text=b17, callback_data="next")
	keyboard.add(q1)
	keyboard.add(q3, q4)

	adm = types.InlineKeyboardMarkup()
	adm1 = types.InlineKeyboardButton(text=b4, callback_data="qiwi")
	adm9 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="cardcard")
	adm10 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∫—É", callback_data="platejka")
	adm2 = types.InlineKeyboardButton(text=b5, callback_data="stat")
	adm3 = types.InlineKeyboardButton(text=b6, callback_data="send")
	adm8 = types.InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç", callback_data="spisoka")
	adm4 = types.InlineKeyboardButton(text=b9, callback_data="addancete")
	adm7 = types.InlineKeyboardButton(text=b22, callback_data="addphoto")
	adm5 = types.InlineKeyboardButton(text=b10, callback_data="deleteancete")
	adm6 = types.InlineKeyboardButton(text=b7, callback_data="esc")
	adm.add(adm1)
	adm.add(adm9)
	adm.add(adm10)
	adm.add(adm2)
	adm.add(adm3)
	adm.add(adm8)
	adm.add(adm4)
	adm.add(adm7)
	adm.add(adm5)
	adm.add(adm6)
	if call.message:
		if call.data == "next":
			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select photoid from users where id = {call.message.chat.id}")
			imgid = cur.fetchone()[0]
			con.commit()
			imgid += 1

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select count(*) from ancety")
			counta = cur.fetchone()[0]
			con.commit()

			if imgid > counta:
				imgid = 1

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select status from ancety where id = {imgid}")
			stat = cur.fetchone()[0]
			con.commit()

			while stat == 0:
				imgid += 1
				if imgid > counta:
					imgid = 1
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select status from ancety where id = {imgid}")
				stat = cur.fetchone()[0]
				con.commit()

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"UPDATE users SET photoid = {imgid} WHERE id = {call.message.chat.id}")
			con.commit()

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select mainphoto from ancety where id = {imgid}")
			img = cur.fetchone()[0]
			con.commit()

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select name from ancety where id = {imgid}")
			aname = cur.fetchone()[0]
			con.commit()

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select cena from ancety where id = {imgid}")
			acena = cur.fetchone()[0]
			con.commit()

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select about from ancety where id = {imgid}")
			aabout = cur.fetchone()[0]
			con.commit()

			texttext = f"ü¶ã –ò–º—è: {aname}\n\nüí∞  –¶–µ–Ω–∞ –∑–∞ —á–∞—Å: {acena}\n\n‚ùóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {aabout}"

			imglink = f"images/{img}"
			photo = open(imglink, 'rb')

			bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id,
								   media=types.InputMediaPhoto(photo), reply_markup=keyboard)
			bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption=texttext,
									 reply_markup=keyboard)
		elif call.data == "prew":
			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select photoid from users where id = {call.message.chat.id}")
			imgid = cur.fetchone()[0]
			con.commit()
			imgid -= 1

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select count(*) from ancety")
			counta = cur.fetchone()[0]
			con.commit()

			if imgid < 1:
				imgid = counta

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select status from ancety where id = {imgid}")
			stat = cur.fetchone()[0]
			con.commit()

			while stat == 0:
				imgid -= 1
				if imgid < 1:
					imgid = counta
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select status from ancety where id = {imgid}")
				stat = cur.fetchone()[0]
				con.commit()

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"UPDATE users SET photoid = {imgid} WHERE id = {call.message.chat.id}")
			con.commit()

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select mainphoto from ancety where id = {imgid}")
			img = cur.fetchone()[0]
			con.commit()

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select name from ancety where id = {imgid}")
			aname = cur.fetchone()[0]
			con.commit()

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select cena from ancety where id = {imgid}")
			acena = cur.fetchone()[0]
			con.commit()

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select about from ancety where id = {imgid}")
			aabout = cur.fetchone()[0]
			con.commit()

			texttext = f"ü¶ã –ò–º—è: {aname}\n\nüí∞ –¶–µ–Ω–∞ –∑–∞ —á–∞—Å: {acena}\n\n‚ùóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {aabout}"

			imglink = f"images/{img}"
			photo = open(imglink, 'rb')
			bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id,
								   media=types.InputMediaPhoto(photo), reply_markup=keyboard)
			bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption=texttext,
									 reply_markup=keyboard)
		elif call.data == "addancete":
			bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ –∞–Ω–∫–µ—Ç—ã")
			bot.register_next_step_handler(call.message, newancet)
		elif call.data == "menu":
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
								  text="–í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞")

		elif call.data == "prom":
			bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.")
			bot.register_next_step_handler(call.message, create_promo)
		elif call.data == "esc":
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
								  text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞")

		elif call.data == "deleteancete":
			bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–Ω–∫–µ—Ç—ã –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=cancel())
			bot.register_next_step_handler(call.message, otklancete)
		elif call.data == "prov":
			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select number from sposobaoplaty")
			spso = cur.fetchone()[0]
			con.commit()

			if spso == 1:
				user_id = call.message.chat.id

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select num from qiwi")
				qiwinumber = cur.fetchone()[0]
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select token from qiwi")
				token_qiwi = cur.fetchone()[0]
				con.commit()

				QIWI_TOKEN = token_qiwi
				QIWI_ACCOUNT = str(qiwinumber)
				s = requests.Session()
				s.headers['authorization'] = 'Bearer ' + QIWI_TOKEN
				parameters = {'rows': '50'}
				h = s.get('https://edge.qiwi.com/payment-history/v1/persons/' + QIWI_ACCOUNT + '/payments',
						  params=parameters)
				req = json.loads(h.text)
				try:
					cur.execute(f"SELECT * FROM oplata WHERE id = {user_id}")
					result = cur.fetchone()
					comment = str(result[1])

					for x in range(len(req['data'])):

						if req['data'][x]['comment'] == comment:

							skolko = (req['data'][x]['sum']['amount'])
							cur.execute(f"DELETE FROM oplata WHERE id = {user_id}")
							con.commit()

							con = sqlite3.connect("data.db")
							cur = con.cursor()
							cur.execute(f"select balance from users WHERE id = {call.message.chat.id}")
							balancenow = cur.fetchone()[0]
							con.commit()

							con = sqlite3.connect("data.db")
							cur = con.cursor()
							cur.execute(
								f"UPDATE users SET balance = {balancenow + skolko} WHERE id = {call.message.chat.id}")
							con.commit()

							cur.execute(f"SELECT boss FROM users WHERE id = {user_id}")

							for worker in cur.execute(f"SELECT boss FROM users WHERE id = {user_id}"):
								wk = worker[0]
							cur.execute(f"SELECT username FROM users WHERE id = {wk}")

							for username in cur.execute(f"SELECT username FROM users WHERE id = {wk}"):
								workerusername = username[0]
							for name in cur.execute(f"SELECT name FROM users WHERE id = {wk}"):
								workername = name[0]

							con = sqlite3.connect("data.db")
							cur = con.cursor()
							cur.execute(f"select name from users where id = {call.message.chat.id}")
							mamont = cur.fetchone()[0]
							con.commit()

							bot.send_message(zalety,
											 f"ü¶ã –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ü¶ã\n\nüíµ –°—É–º–º–∞: {skolko}‚ÇΩ\nüíº –†–∞–±–æ—Ç–Ω–∏–∫: @{workerusername}")
							bot.send_message(admin,
											 f"[{call.message.chat.first_name}](tg://user?id={call.message.chat.id}) –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {skolko}‚ÇΩ",
											 parse_mode='Markdown')
							bot.send_message(wk,
											 f"–í–∞—à –º–∞–º–æ–Ω—Ç: [{call.message.chat.first_name}](tg://user?id={call.message.chat.id}) –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {skolko}‚ÇΩ",
											 parse_mode='Markdown')
							cur.execute(f"UPDATE users SET balance = {balancenow + skolko} WHERE id = {call.message.chat.id}")
							con.commit()

							# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
							bot.send_message(call.message.chat.id, f"üí∏ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.\n\n–ë–∞–ª–∞–Ω—Å {balancenow + skolko}‚ÇΩ", reply_markup=userpanel())

							break
						else:
							bot.send_message(call.message.chat.id,
											 "‚ö†Ô∏è–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏‚ö†Ô∏è\n\n–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\"")

							break

				except:
					pass
			else:
				try:

					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"SELECT summ FROM oplatac where id = {call.message.chat.id}")
					sa = cur.fetchone()[0]
					con.commit()

					k = types.InlineKeyboardMarkup()
					k1 = types.InlineKeyboardButton(text="–í—ã–ø–ª–∞—Ç–∏—Ç—å", callback_data="vyplata")
					k2 = types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="otklon")

					k.add(k1)
					k.add(k2)
					bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
										  text="üí∏ –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é.\n\n‚ÑπÔ∏è –ß—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –õ–∏–Ω–∫ –Ω–∞ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —á–µ–∫.")
					bot.send_message(call.message.chat.id, f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=userpanel())

					bot.send_message(admin,
									 f"ID –ø–ª–∞—Ç–µ–∂–∞ `{call.message.chat.id}`\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.message.chat.first_name} –ó–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞.\n–°—É–º–º–∞ {sa}",
									 reply_markup=k, parse_mode='Markdown')


				except:
					pass
		elif call.data == "vyplata":
			bot.send_message(call.message.chat.id, f"–ù–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ –ø–ª–∞—Ç–µ–∂–∞", reply_markup=cancel())
			bot.register_next_step_handler(call.message, prinyatieplateja)

		elif call.data == "otklon":
			bot.send_message(call.message.chat.id, f"–ù–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ –ø–ª–∞—Ç–µ–∂–∞", reply_markup=cancel())
			bot.register_next_step_handler(call.message, otklonplateja)

		elif call.data == "stat":
			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"SELECT COUNT (*) FROM users")
			number = cur.fetchone()[0]
			con.commit()
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
								  text=f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ - {number}")
			bot.send_message(call.message.chat.id, "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=adm)
		elif call.data == "vkl":
			try:
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select count(*) from ancety")
				c = cur.fetchone()[0]
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()

				cur.execute(f"UPDATE ancety SET status = {1} WHERE id = {c}")
				con.commit()
				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
									  text="–ê–Ω–∫–µ—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞")

			except Exception as e:
				raise
		elif call.data == "otkl":
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
								  text="–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
			bot.register_next_step_handler(call.message, main_message)
		elif call.data == "ref":
			reflnk = f"https://t.me/{bot_username}?start={call.message.chat.id}"
			otvet_ref = f"–í–∞—à–∞ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞ {reflnk}"
			bot.send_message(call.message.chat.id, otvet_ref)
		elif call.data == "qiwi":
			bot.send_message(call.message.chat.id,
							 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞(–±–µ–∑ + –∞) –∏ —Ç–æ–∫–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ  –Ω–æ–º–µ—Ä:—Ç–æ–∫–µ–Ω\n\n–ü—Ä–∏–º–µ—Ä 7916123456:s132sdfsdf21s5f6sdf1s3s3dfs132",
							 reply_markup=cancel())
			bot.register_next_step_handler(call.message, replaceqiwi)
		elif call.data == "send":

			bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—ã–ª–∫–∏", reply_markup=cancel())
			bot.register_next_step_handler(call.message, rass)
		elif call.data == "vybor":

			bot.send_message(call.message.chat.id, skolkochasov, reply_markup=cancel())
			bot.register_next_step_handler(call.message, chas)
		elif call.data == "addphoto":
			bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–Ω–∫–µ—Ç—ã –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
							 reply_markup=cancel())
			bot.register_next_step_handler(call.message, addp)
		elif call.data == "photos":
			try:
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"SELECT photoid from users where id = {call.message.chat.id}")
				pi = cur.fetchone()[0]
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select count(*) from photos where anceta = {pi}")
				allp = cur.fetchone()[0]
				con.commit()

				if allp == 0:
					bot.send_message(call.message.chat.id, "–ë–æ–ª—å—à–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ—Ç—É.")

				else:
					con = sqlite3.connect("data.db")
					cur = con.cursor()

					cur.execute(f"SELECT image FROM photos where anceta = {pi}")
					id = cur.fetchall()
					con.commit()

					con = sqlite3.connect("data.db")
					cur = con.cursor()

					cur.execute(f"SELECT mainphoto FROM ancety where id = {pi}")
					mi = f"images/{cur.fetchone()[0]}"
					con.commit()
					mip = open(mi, 'rb')
					bot.delete_message(call.message.chat.id, call.message.message_id)

					# bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id,media=types.InputMediaPhoto(mip))
					arr = []
					for i in id:
						try:
							arr.append(InputMediaPhoto(open(f"images/{i[0]}", 'rb')))

						# photo = open(imglink, 'rb')


						except:
							pass

					bot.send_media_group(call.message.chat.id, arr)

					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"select mainphoto from ancety where id = {pi}")
					img = cur.fetchone()[0]
					con.commit()

					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"select name from ancety where id = {pi}")
					aname = cur.fetchone()[0]
					con.commit()

					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"select cena from ancety where id = {pi}")
					acena = cur.fetchone()[0]
					con.commit()

					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"select about from ancety where id = {pi}")
					aabout = cur.fetchone()[0]
					con.commit()

					texttext = f"ü¶ã –ò–º—è: {aname}\n\nüí∞–¶–µ–Ω–∞ –∑–∞ —á–∞—Å: {acena}\n\n‚ùóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {aabout}"

					imglink = f"images/{img}"
					photo = open(imglink, 'rb')
					bot.send_photo(call.message.chat.id, photo, caption=texttext, reply_markup=keyboard)

			except Exception as e:
				bot.send_message(call.message.chat.id, e)
		elif call.data == "statw":

			wrk = types.InlineKeyboardMarkup()
			wrk1 = types.InlineKeyboardButton(text=b8, callback_data="ref")
			wrk5 = types.InlineKeyboardButton(text="–°–æ–æ–±—â–µ–Ω–∏–µ –º–∞–º–æ–Ω—Ç—É", callback_data="smsmamont")
			wrk2 = types.InlineKeyboardButton(text=b18, callback_data="prom")
			wrk4 = types.InlineKeyboardButton(text=b5, callback_data="statw")
			wrk3 = types.InlineKeyboardButton(text=b11, callback_data="menu")

			wrk.add(wrk1)
			wrk.add(wrk5)
			wrk.add(wrk2)
			wrk.add(wrk4)
			wrk.add(wrk3)
			con = sqlite3.connect("data.db")
			cur = con.cursor()

			cur.execute(f"SELECT id FROM users where boss = {call.message.chat.id}")
			wstat = cur.fetchall()
			con.commit()

			strw = "üêò –¢–≤–æ–∏ –ú–∞–º–æ–Ω—Ç—ã üêò\n\n"
			countstrw = len(wstat) // 50
			arrstatw = []

			for i in wstat:
				try:
					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"SELECT name FROM users where id = {i[0]}")
					statwname = cur.fetchone()[0]
					con.commit()

					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"SELECT username FROM users where id = {i[0]}")
					statwusername = cur.fetchone()[0]
					con.commit()

					imya = statwname.split("|")

					strw = f"{i[0]} {imya[0]} {statwusername}\n"
					arrstatw.append(strw)
				except:
					pass

			if (len(arrstatw) > 50):
				for x in range(len(arrstatw)):
					strw += arrstatw[x]
					if x % 50 == 0 or x == len(arrstatw) - 1:
						bot.send_message(call.message.chat.id, f"{strw}")
						strw = "üêò –¢–≤–æ–∏ –ú–∞–º–æ–Ω—Ç—ã üêò\n\n"



			else:
				for i in arrstatw:
					strw += i
				bot.send_message(call.message.chat.id, f"{strw}")

			bot.send_message(call.message.chat.id, "–í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å‚öôÔ∏è", reply_markup=wrk)

		# bot.send_message(call.message.chat.id, strw,parse_mode='Markdown')

		elif call.data == "gorod":
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="‚úÖ–ì–æ—Ä–æ–¥ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
			stickers = ['CAACAgIAAxkBAAEBM-BggrHread3F142tJYnOpKTKVc3tQACDQEAAladvQpG_UMdBUTXlx8E',
						'CAACAgIAAxkBAAEBM91ggrHl8_4xhl-e-jlNJZ-Rtn0SOAACBAEAAladvQreBNF6Zmb3bB8E',
						'CAACAgEAAxkBAAEBM9pggrHeNPDgVQ6SCQU50Ov3aVqOcgACxAUAAr-MkAR0SG3e07gfIx8E',
						'CAACAgIAAxkBAAEBM9dggrHTRqI0l7kR8OVad9dQr-EZwwACSwMAArVx2gZu3ktViH-zcB8E',
						'CAACAgIAAxkBAAEBM9RggrHHuUf7jO5Yotr1SBuyPrJamAACBAEAAladvQreBNF6Zmb3bB8E',
						'CAACAgIAAxkBAAEBM9FggrG-pw9xOsrsTbAHLn-58dQ3swACbwADWbv8JTcoYHK3J9txHwQ',
						'CAACAgIAAxkBAAEBM85ggrG3lrLUSUCl1FD1XRyB9laN4QACWgUAAj-VzAobFrmFvSDDnR8E',
						'CAACAgIAAxkBAAEBM-NggrNIEd1KFDyEqvHr0ZYeV5txAAPPAAP3AsgPufg4-6cYrv0fBA']

			bot.send_sticker(call.message.chat.id, random.choice(stickers), reply_markup=userpanel())
		elif call.data == "spisoka":
			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select id from ancety where status = {1}")
			sp1 = cur.fetchall()
			con.commit()

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select name from ancety where status = {1}")
			sp2 = cur.fetchall()
			con.commit()

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select cena from ancety where status = {1}")
			sp3 = cur.fetchall()
			con.commit()

			res = ""
			for i in range(len(sp1)):
				try:
					res += f"ID: {sp1[i]} –ò–º—è: {sp2[i]}  –¶–µ–Ω–∞: {sp3[i]}\n"
				except Exception as e:
					raise
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–°–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç")
			bot.send_message(call.message.chat.id, res, reply_markup=adm)
		elif call.data == "cardcard":
			bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", reply_markup=cancel())
			bot.register_next_step_handler(call.message, replacecard)
		elif call.data == "platejka":
			bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ 1 —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∏–≤–∏ –∏–ª–∏ 2 —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É")
			bot.register_next_step_handler(call.message, replaceplatejka)

		elif call.data == "smsmamont":
			bot.send_message(call.message.chat.id,
							 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–π–¥–∏ –º–∞–º–æ–Ω—Ç–∞ –∏ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ id:–°–æ–æ–±—â–µ–Ω–∏–µ\n\n–ù–∞–ø—Ä–∏–º–µ—Ä  123456789:–¢—ã –º–∞–º–æ–Ω—Ç",
							 reply_markup=cancel())
			bot.register_next_step_handler(call.message, mamontmessage)
		else:
			pass


@bot.message_handler(content_types=['photo'])
def newancet(message):
	try:
		if message.chat.id == admin:
			file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
			downloaded_file = bot.download_file(file_info.file_path)

			src = 'images/' + file_info.file_path;
			with open(src, 'wb') as new_file:
				new_file.write(downloaded_file)

			imglink = file_info.file_path

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select count(*) from ancety")
			c = cur.fetchone()[0]
			con.commit()
			con = sqlite3.connect("data.db")
			cur = con.cursor()
			nn = "a"
			mm = 0
			cur.execute(f"INSERT INTO ancety (id,mainphoto,name,cena,about,status)"
						f"VALUES ({c + 1},\"{imglink}\",\"{nn}\",{mm},\"{nn}\",{0})")
			con.commit()

			bot.send_message(message.chat.id, "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n\n–ö–∞–∫ –±—É–¥–µ–º –Ω–∞–∑—ã–≤–∞—Ç—å —ç—Ç—É –±–∞–±–æ—á–∫—É?üôÉ")
			bot.register_next_step_handler(message, nameancet)



	except Exception as e:
		bot.reply_to(message, e)


@bot.message_handler(content_types=['text'])
def nameancet(message):
	try:
		if message.chat.id == admin:
			nameb = message.text

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select count(*) from ancety")
			c = cur.fetchone()[0]
			con.commit()

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"UPDATE ancety SET name = \'{nameb}\' WHERE id = {c}")
			con.commit()

			bot.send_message(message.chat.id, "–ò–º—è –≤—ã–±—Ä–∞–Ω–æ ‚úÖ\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–∞–±–æ—á–∫–∏ –∑–∞ —á–∞—Å üí∏")
			bot.register_next_step_handler(message, cenaancet)
	except Exception as e:
		bot.reply_to(message, e)
		bot.register_next_step_handler(message, nameancet)


@bot.message_handler(content_types=['text'])
def cenaancet(message):
	try:
		if message.chat.id == admin:
			if message.text.isdigit():
				cenna = int(message.text)
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select count(*) from ancety")
				c = cur.fetchone()[0]
				con.commit()
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"UPDATE ancety SET cena = {cenna} WHERE id = {c}")
				con.commit()

				bot.send_message(message.chat.id, "–¶–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞ ‚úÖ\n–í–≤–µ–¥–∏—Ç–µ —É—Å–ª—É–≥–∏ –¥–µ–≤—É—à–∫–∏")
				bot.register_next_step_handler(message, uslugiancet)

			else:
				bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
				bot.register_next_step_handler(message, cenaancet)


	except Exception as e:
		bot.reply_to(message, e)
		bot.register_next_step_handler(message, cenaancet)


@bot.message_handler(content_types=['text'])
def uslugiancet(message):
	try:

		if message.chat.id == admin:
			uslu = message.text
			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select count(*) from ancety")
			c = cur.fetchone()[0]
			con.commit()
			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"UPDATE ancety SET about = \'{uslu}\' WHERE id = {c}")
			con.commit()

			ak = types.InlineKeyboardMarkup()
			ak1 = types.InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å", callback_data="vkl")
			ak2 = types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data="otkl")

			ak.add(ak1)
			ak.add(ak2)

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select mainphoto from ancety where id = {c}")
			img = cur.fetchone()[0]
			con.commit()

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select name from ancety where id = {c}")
			aname = cur.fetchone()[0]
			con.commit()

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select cena from ancety where id = {c}")
			acena = cur.fetchone()[0]
			con.commit()

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select about from ancety where id = {c}")
			aabout = cur.fetchone()[0]
			con.commit()

			texttext = f"ü¶ã –ò–º—è: {aname}\n\nüí∞–¶–µ–Ω–∞ –∑–∞ —á–∞—Å: {acena}\n\n‚ùóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {aabout}"

			imglink = f"images/{img}"
			photo = open(imglink, 'rb')
			bot.send_photo(message.chat.id, photo, caption=texttext)

			bot.send_message(message.chat.id, "–ê–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ !\n–í–∫–ª—é—á–∏—Ç—å –¥–∞–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É ?", reply_markup=ak)

			bot.register_next_step_handler(message, main_message)





	except Exception as e:
		bot.reply_to(message, e)
		bot.register_next_step_handler(message, uslugiancet)


@bot.message_handler(content_types=['text'])
def otklancete(message):
	try:
		nomer = message.text
		if message.text == b20:
			bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=userpanel())
			bot.register_next_step_handler(message, main_message)
		else:

			if nomer.isdigit():
				try:
					if message.chat.id == admin:
						con = sqlite3.connect("data.db")
						cur = con.cursor()
						cur.execute(f"select count(*) from ancety where id = {nomer}")
						if cur.fetchone()[0] == 1:
							con.commit()

							con = sqlite3.connect("data.db")
							cur = con.cursor()
							cur.execute(f"UPDATE ancety SET status = {0} WHERE id ={nomer}")
							con.commit()
							bot.send_message(message.chat.id, "–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞", reply_markup=userpanel())
							bot.register_next_step_handler(message, main_message)




					else:
						bot.send_message(message.chat.id, "–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∞–Ω–∫–µ—Ç—ã")
						bot.register_next_step_handler(message, otklancete)




				except Exception as e:
					bot.reply_to(message, e)
					bot.register_next_step_handler(message, otklancet)

			else:
				bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
				bot.register_next_step_handler(message, otklancet)

	except Exception as e:
		bot.reply_to(message, e)
		bot.register_next_step_handler(message, otklancet)


@bot.message_handler(content_types=['text'])
def create_promo(message):
	try:
		if message.text.isdigit():
			summ = int(message.text)
			if summ > maxpromo:
				bot.send_message(message.chat.id, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ {maxpromo}")
				bot.register_next_step_handler(message, create_promo)
			elif summ <= 0:
				bot.send_message(message.chat.id, f"–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
				bot.register_next_step_handler(message, create_promo)
			else:
				letters = string.ascii_letters
				codecode = (''.join(random.choice(letters) for i in range(10)))
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"INSERT INTO promocode (summa,code)"
							f"VALUES ({summ},\'{codecode}\')")
				con.commit()
				bot.send_message(message.chat.id,
								 f"–ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω !\n\n`{codecode}`\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
								 parse_mode='Markdown')
				bot.register_next_step_handler(message, main_message)


		else:
			bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

	except Exception as e:
		bot.reply_to(message, e)
		bot.register_next_step_handler(message, create_promo)


@bot.message_handler(content_types=['text'])
def promo(message):
	try:
		testpromo = message.text
		if testpromo == b20:
			bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=userpanel())
			bot.register_next_step_handler(message, main_message)

		else:

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select count(*) from promocode where code = \'{testpromo}\'")

			r = cur.fetchone()[0]

			con.commit()

			if r == 0:

				bot.send_message(message.chat.id,
								 "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.")
				bot.register_next_step_handler(message, promo)
			else:

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select summa from promocode where code = \'{testpromo}\'")
				summpromo = cur.fetchone()[0]
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"DELETE  from promocode where code = \'{testpromo}\'")
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select balance from users where id = {message.chat.id}")
				balancenow = cur.fetchone()[0]
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"UPDATE users SET balance = {balancenow + summpromo} WHERE id = {message.chat.id}")
				con.commit()

				bot.send_message(message.chat.id,
								 f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {summpromo}‚ÇΩ\n\nüí∞ –ë–∞–ª–∞–Ω—Å {balancenow + summpromo}‚ÇΩ",
								 reply_markup=userpanel())
				bot.register_next_step_handler(message, main_message)



	except Exception as e:
		pass


@bot.message_handler(content_types=['text'])
def balik(message):
	if message.text == b12:
		bot.send_message(message.chat.id, "‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", reply_markup=cancel())
		bot.register_next_step_handler(message, popolni)

	elif message.text == b20:
		bot.send_message(message.chat.id, "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=userpanel())
		bot.register_next_step_handler(message, main_message)


@bot.message_handler(content_types=['text'])
def popolni(message):
	if message.text == b20:
		bot.send_message(message.chat.id, "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=userpanel())
		bot.register_next_step_handler(message, main_message)
	else:

		if message.text.isdigit():
			skolko = int(message.text)
			if skolko >= minimalka and skolko <= maximalka:

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select number from sposobaoplaty")
				spso = cur.fetchone()[0]
				con.commit()

				if spso == 1:

					try:
						con = sqlite3.connect("data.db")
						cur = con.cursor()
						cur.execute(f"DELETE FROM oplata WHERE id = {message.chat.id}")
						con.commit()
					except Exception as e:
						raise

					con = sqlite3.connect("data.db")
					cur = con.cursor()
					comment = randint(10000, 9999999)
					cur.execute(f"INSERT INTO oplata (id, code) VALUES({message.chat.id}, {comment})")
					con.commit()

					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"select num from qiwi")
					qiwinumber = cur.fetchone()[0]
					con.commit()

					texttt = f'üí≥ –û–ø–ª–∞—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è: –ß–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
					link = f"–õ–∏–Ω–∫ –Ω–∞ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É"
					markup_inline = types.InlineKeyboardMarkup()
					pereyti = types.InlineKeyboardButton(text="‚û°Ô∏è –°–≤—è–∑–∞—Ç—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", callback_data="site", url=link)
					proverka = types.InlineKeyboardButton(text='‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data='prov')
					markup_inline.add(pereyti)

					bot.send_message(message.from_user.id, texttt, parse_mode='Markdown', reply_markup=markup_inline)
					bot.register_next_step_handler(message, main_message)
				else:
					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"DELETE from oplatac where id = {message.chat.id}")

					con.commit()

					con = sqlite3.connect("data.db")
					cur = con.cursor()

					cur.execute(f"INSERT INTO oplatac (id,summ) VALUES({message.chat.id},{skolko})")
					con.commit()

					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"select num from card")
					cardnumber = cur.fetchone()[0]
					con.commit()

					texttt = f'üí∏ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {skolko}‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É\n\nüí≥ –ù–æ–º–µ—Ä: `{cardnumber}`\n\n_–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å_'

					markup_inline = types.InlineKeyboardMarkup()

					proverka = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='prov')

					markup_inline.add(proverka)

					bot.send_message(message.from_user.id, texttt, parse_mode='Markdown', reply_markup=markup_inline)
					bot.register_next_step_handler(message, main_message)

			else:
				bot.send_message(message.chat.id, f"–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {minimalka} –¥–æ {maximalka}")
				bot.register_next_step_handler(message, popolni)

		else:
			bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
			bot.register_next_step_handler(message, popolni)


@bot.message_handler(content_types=['text'])
def replaceqiwi(message):
	try:
		newqiwi = message.text

		if newqiwi == b20:
			bot.send_message(message.from_user.id, f"–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=userpanel())
			bot.register_next_step_handler(message, main_message)
		else:
			if message.chat.id == admin:
				q = newqiwi.split(":")
				nq = int(q[0])
				tq = q[1]

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"UPDATE qiwi SET num = {nq}")
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"UPDATE qiwi SET token = \'{tq}\'")
				con.commit()

				bot.send_message(message.from_user.id, f"–î–∞–Ω–Ω—ã–µ –∫–∏–≤–∏ –∏–∑–º–µ–Ω–µ–Ω—ã\n\n–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: {nq}\n–ù–æ–≤—ã —Ç–æ–∫–µ–Ω: {tq}",
								 reply_markup=userpanel())
				bot.register_next_step_handler(message, main_message)



	except Exception as e:
		raise


@bot.message_handler(content_types=['text'])
def rass(message):
	if message.chat.id == admin:

		if message.text == b20:
			bot.send_message(message.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=userpanel())
			bot.register_next_step_handler(message, main_message)

		else:
			con = sqlite3.connect("data.db")
			cur = con.cursor()
			bot.send_message(message.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞")
			cur.execute("SELECT id FROM users")
			id = cur.fetchall()
			for i in id:
				try:
					bot.send_message(i[0], f"{message.text}")
					time.sleep(0.1)
				except:
					pass
			bot.send_message(message.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=userpanel())
			bot.register_next_step_handler(message, main_message)


@bot.message_handler(content_types=['text'])
def chas(message):
	try:
		con = sqlite3.connect("data.db")
		cur = con.cursor()
		cur.execute(f"select photoid from users where id = {message.chat.id}")
		vi = cur.fetchone()[0]
		con.commit()

		con = sqlite3.connect("data.db")
		cur = con.cursor()
		cur.execute(f"select balance from users where id = {message.chat.id}")
		bnow = cur.fetchone()[0]
		con.commit()

		con = sqlite3.connect("data.db")
		cur = con.cursor()
		cur.execute(f"select cena from ancety where id = {vi}")
		op = cur.fetchone()[0]
		con.commit()

		skch = message.text
		if message.text == b20:
			bot.send_message(message.from_user.id, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=userpanel())
			bot.register_next_step_handler(message, main_message)
		else:

			if skch.isdigit():
				if int(skch) >= 0 and int(skch) <= 24:
					if int(skch) % 1 == 0:
						if int(skch) >= 2:
							op = op + (int(skch) * op) / 2

						if op > bnow:
							bot.send_message(message.from_user.id,
											 f"‚ùóÔ∏è –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {op}‚ÇΩ\n–ù–∞ –±–∞–ª–∞–Ω—Å–µ {bnow}‚ÇΩ",
											 reply_markup=bal())
							bot.register_next_step_handler(message, balik)
						else:
							con = sqlite3.connect("data.db")
							cur = con.cursor()
							cur.execute(f"UPDATE users SET balance = {bnow - op} WHERE id = {message.chat.id}")
							con.commit()

							keyboard = types.InlineKeyboardMarkup()
							button = types.InlineKeyboardButton(text="‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", url="–õ–∏–Ω–∫ –Ω–∞ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É")
							keyboard.add(button)

							bot.send_message(message.from_user.id,
                							f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑\n\n‚ÑπÔ∏è –°—Ä–µ–¥—Å—Ç–≤–∞ —Å–ø–∏—Å–∞–Ω—ã —Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–∞–ª–æ–Ω–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–æ–±—ã—Ç–∏–π.\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞!",
                							reply_markup=keyboard)

							bot.register_next_step_handler(message, main_message)




					else:
						bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
						bot.register_next_step_handler(message, chas)

				else:
					bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 24.")
					bot.register_next_step_handler(message, chas)

			else:
				bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
				bot.register_next_step_handler(message, chas)

	except Exception as e:
		raise


@bot.message_handler(content_types=['text'])
def addp(message):
	if message.text == b20:
		bot.send_message(message.from_user.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=userpanel())
		bot.register_next_step_handler(message, main_message)
	else:
		try:
			if message.chat.id == admin:

				if message.text.isdigit():
					nnn = int(message.text)
					try:
						con = sqlite3.connect("data.db")
						cur = con.cursor()
						cur.execute(f"select count(*) from ancety where id = {nnn}")
						addcount = cur.fetchone()[0]
						con.commit()
						if addcount == 0:
							bot.send_message(message.from_user.id, "–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä")
							bot.register_next_step_handler(message, addp)
						else:
							con = sqlite3.connect("data.db")
							cur = con.cursor()
							cur.execute(f"select count(*) from photos")
							countphotos = cur.fetchone()[0]
							con.commit()

							con = sqlite3.connect("data.db")
							cur = con.cursor()
							cur.execute(f"select mainphoto from ancety where id = {nnn}")
							mphoto = cur.fetchone()[0]
							con.commit()

							con = sqlite3.connect("data.db")
							cur = con.cursor()
							cur.execute(f"INSERT INTO photos (id,anceta,image)"
										f"VALUES ({countphotos + 1},{nnn},\'{mphoto}\')")

							con.commit()
							bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
							bot.register_next_step_handler(message, addimage)


					except Exception as e:
						raise



				else:
					bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
					bot.register_next_step_handler(message, addp)
		except Exception as e:
			raise


@bot.message_handler(content_types=['photo'])
def addimage(message):
	try:
		if message.chat.id == admin:
			file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
			downloaded_file = bot.download_file(file_info.file_path)

			src = 'images/' + file_info.file_path;
			with open(src, 'wb') as new_file:
				new_file.write(downloaded_file)

			imagelink = file_info.file_path

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"select count(*) from photos")
			countphotos = cur.fetchone()[0]
			con.commit()

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"UPDATE photos SET image = \'{imagelink}\' WHERE id = {countphotos}")
			con.commit()

			bot.send_message(message.from_user.id, "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.", reply_markup=userpanel())
			bot.register_next_step_handler(message, main_message)





	except Exception as e:
		raise


@bot.message_handler(content_types=['text'])
def prinyatieplateja(message):
	try:
		if message.text == b20:
			bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
			bot.register_next_step_handler(message, main_message)
		else:

			if message.text.isdigit():

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select count(*) from oplatac where id = {int(message.text)}")
				inn = cur.fetchone()[0]
				con.commit()

				if inn == 0:
					bot.send_message(message.chat.id, "ID –ü–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω\n–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–π–¥–∏")
					bot.register_next_step_handler(message, prinyatieplateja)
				else:

					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"select summ from oplatac where id = {int(message.text)}")
					isumm = cur.fetchone()[0]
					con.commit()

					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"select balance from users where id = {int(message.text)}")
					ibn = cur.fetchone()[0]
					con.commit()

					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"UPDATE users SET balance = {ibn + isumm} where id = {int(message.text)}")

					con.commit()

					bot.send_message(int(message.text), "‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω", reply_markup=userpanel())
					bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!")
					bot.register_next_step_handler(message, main_message)

			else:
				bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
				bot.register_next_step_handler(message, prinyatieplateja)






	except Exception as e:
		raise


@bot.message_handler(content_types=['text'])
def otklonplateja(message):
	try:

		if message.text == b20:
			bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
			bot.register_next_step_handler(message, main_message)
		else:
			if message.text.isdigit():

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select count(*) from oplatac where id = {int(message.text)}")
				inn = cur.fetchone()[0]
				con.commit()

				if inn == 0:
					bot.send_message(message.chat.id, "ID –ü–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω\n–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–π–¥–∏")
					bot.register_next_step_handler(message, otklonplateja)
				else:

					con = sqlite3.connect("data.db")
					cur = con.cursor()
					cur.execute(f"select id from oplatac where id = {int(message.text)}")
					i = cur.fetchone()[0]
					con.commit()

					bot.send_message(i, "–í–∞—à –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω !")
					bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!", reply_markup=userpanel())
					bot.register_next_step_handler(message, main_message)
			else:
				bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
				bot.register_next_step_handler(message, otklonplateja)
	except Exception as e:
		raise


@bot.message_handler(content_types=['text'])
def replacecard(message):
	try:
		newqiwi = message.text

		if newqiwi == b20:
			bot.send_message(message.from_user.id, f"–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=userpanel())
			bot.register_next_step_handler(message, main_message)
		else:

			if (message.text.isdigit()):

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"UPDATE card SET num = {int(message.text)}")
				con.commit()

				bot.send_message(message.chat.id, f"–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã", reply_markup=userpanel())
				bot.register_next_step_handler(message, main_message)

			else:
				bot.send_message(message.from_user.id, f"–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
				bot.register_next_step_handler(message, replaceqiwi)






	except Exception as e:
		raise


@bot.message_handler(content_types=['text'])
def replaceplatejka(message):
	try:
		if (message.text.isdigit()):

			con = sqlite3.connect("data.db")
			cur = con.cursor()
			cur.execute(f"UPDATE sposobaoplaty SET number = {int(message.text)}")
			con.commit()

			bot.send_message(message.chat.id, f"–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã", reply_markup=userpanel())
			bot.register_next_step_handler(message, main_message)

		else:
			bot.send_message(message.from_user.id, f"–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
			bot.register_next_step_handler(message, replaceplatejka)

	except Exception as e:
		raise


@bot.message_handler(content_types=['text'])
def mamontmessage(message):
	wrk = types.InlineKeyboardMarkup()
	wrk1 = types.InlineKeyboardButton(text=b8, callback_data="ref")
	wrk5 = types.InlineKeyboardButton(text="–°–æ–æ–±—â–µ–Ω–∏–µ –º–∞–º–æ–Ω—Ç—É", callback_data="smsmamont")
	wrk2 = types.InlineKeyboardButton(text=b18, callback_data="prom")
	wrk4 = types.InlineKeyboardButton(text=b5, callback_data="statw")
	wrk3 = types.InlineKeyboardButton(text=b11, callback_data="menu")

	wrk.add(wrk1)
	wrk.add(wrk5)
	wrk.add(wrk2)
	wrk.add(wrk4)
	wrk.add(wrk3)
	try:
		if ":" in message.text:

			m = message.text.split(":")

			if m[0].isdigit():
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"select count(*) from users where id = {m[0]}")
				est = cur.fetchone()[0]
				con.commit()
				if est == 0:
					bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
					bot.register_next_step_handler(message, mamontmessage)
				else:

					bot.send_message(m[0], m[1])
					bot.send_message(message.chat.id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", reply_markup=userpanel())
					bot.send_message(message.chat.id, f"–í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å‚öôÔ∏è", reply_markup=wrk)
					bot.register_next_step_handler(message, main_message)
			else:
				bot.send_message(message.chat.id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
				bot.register_next_step_handler(message, mamontmessage)
		elif message.text == b20:
			bot.send_message(message.chat.id, f"–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=userpanel())
			bot.send_message(message.chat.id, f"–í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å‚öôÔ∏è", reply_markup=wrk)
			bot.register_next_step_handler(message, main_message)

		else:
			bot.send_message(message.chat.id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
			bot.register_next_step_handler(message, mamontmessage)

	except Exception as e:
		raise


if __name__ == '__main__':
	bot.polling(none_stop=True)
